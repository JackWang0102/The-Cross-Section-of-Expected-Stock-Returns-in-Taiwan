# -*- coding: utf-8 -*-
"""財金學術研究入門.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17d6xf76njkUK7CNt9X_UCmXyHYOcwCbv
"""

import pandas as pd
import statsmodels.formula.api as sm
import datetime as dt
import numpy as np
from dateutil.relativedelta import relativedelta

# read stock returns
r_stk = pd.read_excel("/content/股價(新).xlsx", sheet_name="s1")
df = r_stk.copy()
df

# remove financial industry
fin = df[df.industry_code==17].index.tolist()
df = df.drop(fin)
print(df)

data_rstk = df

def createdata(sheetname):
  df1 = pd.read_excel("/content/股價(新).xlsx", sheet_name=sheetname )
  # remove financial industry
  fin = df1[df1.industry_code==17].index.tolist()
  df1 = df1.drop(fin)
  return df1

for i in range(2,9):
  sheetname = "s"+ str(i)
  df2 = createdata(sheetname)
  data_rstk = pd.concat([data_rstk, df2], ignore_index = True)
print(data_rstk)  # final stock return data

# date col to datetime
data_rstk["date"] = pd.to_datetime(data_rstk["date"], format="%Y-%M-%D")
print(data_rstk)

# pre-ranking betas (5 years as available, at least 24 months)
# we would like to use the data from 2005 to 2020
# thus, we have 20 pre-ranking betas for each stock
twll = pd.read_excel("/content/加權股價指數.xlsx")
twll["date"] = pd.to_datetime(twll["date"], format="%Y-%M-%D")
print(twll)

"""## 日期必須滾動

"""

# for each stock, find their pre-ranking betas
def get_prebeta(ticker_num, start, end):
  ticker_info = data_rstk[data_rstk.ticker==ticker_num]
  ticker_dt = ticker_info["date"]
  row = 0
  ind = []
  mkt = []
  for i in ticker_dt:
    if start <= i <= end:
      index_ind = ticker_info[ticker_info.date==i].index[0]
      ind.append(ticker_info["monthly_return"][index_ind])  
      index_mkt = twll[twll.date==i].index[0]
      mkt.append(twll["monthly_return"][index_mkt])

  if len(ind) < 24:  
    return
  else:
    list_tuples = list(zip(ind, mkt))  
    df_reg = pd.DataFrame(list_tuples, columns=["ind", "mkt"])
    result = sm.ols(formula="ind ~  mkt", data=df_reg).fit()
    prebeta = result.params["mkt"]
    return prebeta

# calculate pre-ranking betas for each stock
ticker_list = list(set(data_rstk["ticker"]))
prebeta_dict = dict()
for i in ticker_list:
  ticker_num = i
  start = dt.date(2014, 6, 15)
  end = dt.date(2019, 7, 1)
  prebeta = get_prebeta(ticker_num, start, end)
  #print(ticker_num, ";", prebeta, ";", end) 
  if prebeta != None:
    prebeta_dict[i] = prebeta
print(prebeta_dict)

# 10 decimals of pre-ranking betas
q = 0.1
qu_list_beta = []
while q < 0.9:
  qu = np.nanquantile(list(prebeta_dict.values()), q)
  q += 0.1
  qu_list_beta.append(qu)
print(qu_list_beta)

# read data, size & ME
size_me = pd.read_excel("/content/市值.xlsx")
size_me["date"] = pd.to_datetime(size_me["date"], format="%Y-%M-%D")
# remove financial industry
fin = size_me[size_me.industry_code==17].index.tolist()
size_me = size_me.drop(fin)
print(size_me)

# find out size for each stock
ticker_size = list(prebeta_dict.keys()) # if the company has pre-ranking beta, we then calculate its size
size_dict = dict()
for i in ticker_size:
  tempdf = size_me[size_me["ticker"]==i]
  #print(tempdf)
  for j in tempdf["date"]:
    if dt.timedelta(days=1) >= j.to_pydatetime().date()-end >= dt.timedelta(days=-7):
      size_dict[i] = list(tempdf[tempdf.date==j]["mv"])[0]
print(size_dict)

# 10 decimals of size
q = 0.1
qu_list_size = []
while q < 0.9:
  qu = np.nanquantile(list(size_dict.values()), q)
  q += 0.1
  qu_list_size.append(qu)
print(qu_list_size)

"""# 運用上面的資訊來分出100個portfolio(要得到這100個分別包含誰)"""

# sort by size
dict_keys = list(size_dict.keys())      # dictionary keys list
port_sizedict = dict()

for i in range(10):
  name = "p"+str(i+1)+"_size"
  port_sizedict[name] = []

for i in range(len(qu_list_size)):
  for j in range(len(dict_keys)):       # 10% quantile
    if (i == 0) & (size_dict[dict_keys[j]] < qu_list_size[i]):
      port_sizedict["p1_size"].append(dict_keys[j])
    elif 0 < i < len(qu_list_size):
      # 20%-90% quantile
      if (i != len(qu_list_size)-1) & (qu_list_size[i-1] <= size_dict[dict_keys[j]] < qu_list_size[i]):
        name = "p"+str(i+1)+"_size"
        port_sizedict[name].append(dict_keys[j])
      elif i == len(qu_list_size)-1:
        if qu_list_size[i-1] <= size_dict[dict_keys[j]] < qu_list_size[i]:
          name = "p"+str(i+1)+"_size"
          port_sizedict[name].append(dict_keys[j])
        elif size_dict[dict_keys[j]] >= qu_list_size[i]:
          # 100% quantile
          port_sizedict["p10_size"].append(dict_keys[j])
print(port_sizedict)

# dict for 100 size-beta port
port_sbdict = dict()
for i in range(10):
  for j in range(10):
    name = "p"+str(i+1)+"_size+p"+str(j+1)+"_beta"
    port_sbdict[name] = []

# find out which stocks are in the size-beta portfolios, respectively
for i in range(10):
  name = "p"+str(i+1)+"_size"
  for j in port_sizedict[name]:
    # pre-ranking quantile
    if prebeta_dict[j] <= qu_list_beta[0]:
      name = "p"+str(i+1)+"_size+p"+str(1)+"_beta"
      port_sbdict[name].append(j)
    elif qu_list_beta[0] < prebeta_dict[j] <= qu_list_beta[1]:
      name = "p"+str(i+1)+"_size+p"+str(2)+"_beta"
      port_sbdict[name].append(j)
    elif qu_list_beta[1] < prebeta_dict[j] <= qu_list_beta[2]:
      name = "p"+str(i+1)+"_size+p"+str(3)+"_beta"
      port_sbdict[name].append(j)
    elif qu_list_beta[2] < prebeta_dict[j] <= qu_list_beta[3]:
      name = "p"+str(i+1)+"_size+p"+str(4)+"_beta"
      port_sbdict[name].append(j)
    elif qu_list_beta[3] < prebeta_dict[j] <= qu_list_beta[4]:
      name = "p"+str(i+1)+"_size+p"+str(5)+"_beta"
      port_sbdict[name].append(j)
    elif qu_list_beta[4] < prebeta_dict[j] <= qu_list_beta[5]:
      name = "p"+str(i+1)+"_size+p"+str(6)+"_beta"
      port_sbdict[name].append(j)
    elif qu_list_beta[5] < prebeta_dict[j] <= qu_list_beta[6]:
      name = "p"+str(i+1)+"_size+p"+str(7)+"_beta"
      port_sbdict[name].append(j)
    elif qu_list_beta[6] < prebeta_dict[j] <= qu_list_beta[7]:
      name = "p"+str(i+1)+"_size+p"+str(8)+"_beta"
      port_sbdict[name].append(j)
    elif qu_list_beta[7] < prebeta_dict[j] <= qu_list_beta[8]:
      name = "p"+str(i+1)+"_size+p"+str(9)+"_beta"
      port_sbdict[name].append(j)
    elif qu_list_beta[8] < prebeta_dict[j]:
      name = "p"+str(i+1)+"_size+p"+str(10)+"_beta"
      port_sbdict[name].append(j)    
print(port_sbdict)

# next year's monthly returns for each portfolio
start2 = dt.date(2019, 6, 30)
# 100 size-beta portfolios' average returns for next year 
port_avgr = dict()
for i in range(10):
  for j in range(10):
    name = "p"+str(i+1)+"+p"+str(j+1)+"_avg_returns"
    port_avgr[name] = []

for mon in range(12):
  start2 += relativedelta(months=1)
  # monthly returns of stocks within each size-beta portfolio
  port_r = dict()
  for i in range(10):
    for j in range(10):
      name = "p"+str(i+1)+"+p"+str(j+1)+"_returns"
      port_r[name] = []

  for i in range(10):
    for j in range(10):
      name = "p"+str(i+1)+"_size+p"+str(j+1)+"_beta"
      for k in port_sbdict[name]:
        tempdf = data_rstk[data_rstk["ticker"]==k]
        for l in tempdf["date"]:
          if dt.timedelta(days=3) >= l.to_pydatetime().date()-start2 >= dt.timedelta(days=-7):
            mr = tempdf[tempdf["date"]==l]["monthly_return"].tolist()[0]
            name = "p"+str(i+1)+"+p"+str(j+1)+"_returns"
            port_r[name].append(mr)
  #print(port_r)
        
  for i in range(10):
    for j in range(10):
      name = "p"+str(i+1)+"+p"+str(j+1)+"_returns"
      avg = np.nanmean(port_r[name])
      name = "p"+str(i+1)+"+p"+str(j+1)+"_avg_returns"
      port_avgr[name].append(avg)
print(port_avgr)

# check number portfolio returns
for i in range(10):
  for j in range(10):
    name = "p"+str(i+1)+"+p"+str(j+1)+"_avg_returns"
    count = 0
    for k in port_avgr[name]:
      count += 1
    # print(count)
# ok

df_out = pd.DataFrame.from_dict(port_avgr, orient="index")
print(df_out[6])

df_out.to_excel("/content/size_beta每年報酬.xlsx", sheet_name="05_JUL_to_06_JUN")

# monthly returns for size-beta portfolios (drop 2009/1)
sb_mr = pd.read_excel("/content/sizebeta月報酬.xlsx")
sb_mr = sb_mr.dropna(axis=1).T # 2009年1月拿掉(有缺失值)
print(sb_mr)

# market return data (drop 2009/1)
mkt_reg = pd.read_excel("/content/市場月報酬(迴歸用).xlsx")
print(mkt_reg)

# calculate post-ranking betas
postbeta_dict = dict()
for i in range(100):
  Y = sb_mr[i][1:].tolist()
  X = mkt_reg["market_return"].tolist()
  pb_reg = list(zip(Y, X))  
  df_pbreg = pd.DataFrame(pb_reg, columns=["Y", "X"])
  result_pbreg = sm.ols(formula="Y ~  X", data=df_pbreg).fit()
  postbeta = result_pbreg.params["X"]
  postbeta_dict[sb_mr[i][0]] = postbeta
print(postbeta_dict)

# distribute post-ranking betas to stocks
def get_key(val):
    for key, value in port_sbdict.items():
         if val == value:
             return key

# change key names
rename = dict()
for i in range(10):
  for j in range(10):
    name = "p"+str(i+1)+"_size+p"+str(j+1)+"_beta"
    name2 = "p"+str(i+1)+"+p"+str(j+1)+"_avg_returns"
    rename[name] = postbeta_dict[name2]
  
 
ticker_pb = dict()
for i in range(len(list(port_sbdict.values()))):
  for j in list(port_sbdict.values())[i]:
    port_index = get_key(list(port_sbdict.values())[i])
    #print(port_index)
    ticker_pb[j] = [rename[port_index], port_index]
print(ticker_pb)

pb_df = pd.DataFrame.from_dict(ticker_pb, orient="index", columns=["post beta", "portfolio"])
print(pb_df)

pb_df.to_excel("/content/postbeta資料.xlsx", sheet_name="19_JUL_to_20_JUN")