# -*- coding: utf-8 -*-
"""財金學術研究入門2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d8SY1WVTYVS_7wRzhKTZO_MaP5P7o2Ge
"""

import pandas as pd
import statsmodels.formula.api as sm
import datetime as dt
import numpy as np
from dateutil.relativedelta import relativedelta

# read stock returns
r_stk = pd.read_excel("/content/股價(新).xlsx", sheet_name="s1")
df = r_stk.copy()
df

# remove financial industry
fin = df[df.industry_code==17].index.tolist()
df = df.drop(fin)
print(df)

data_rstk = df

# read data, size & ME
  size_me = pd.read_excel("/content/市值.xlsx")
  size_me["date"] = pd.to_datetime(size_me["date"], format="%Y-%M-%D")
  # remove financial industry
  fin = size_me[size_me.industry_code==17].index.tolist()
  size_me = size_me.drop(fin)

def createdata(sheetname):
  df1 = pd.read_excel("/content/股價(新).xlsx", sheet_name=sheetname )
  # remove financial industry
  fin = df1[df1.industry_code==17].index.tolist()
  df1 = df1.drop(fin)
  return df1

for i in range(2,9):
  sheetname = "s"+ str(i)
  df2 = createdata(sheetname)
  data_rstk = pd.concat([data_rstk, df2], ignore_index = True)
print(data_rstk)  # final stock return data

# date col to datetime
data_rstk["date"] = pd.to_datetime(data_rstk["date"], format="%Y-%M-%D")
print(data_rstk)

# pre-ranking betas (5 years as available, at least 24 months)
# we would like to use the data from 2005 to 2020
# thus, we have 20 pre-ranking betas for each stock
twll = pd.read_excel("/content/加權股價指數.xlsx")
twll["date"] = pd.to_datetime(twll["date"], format="%Y-%M-%D")
print(twll)

start = dt.date(2005, 6, 30)
start2 = dt.date(2005, 6, 30)
start3 = dt.date(2004, 12, 30)
for i in range(15):
  path = "/content/postbeta資料-"+str(i+1)+".xlsx"
  postb_df = pd.read_excel(path)
  ticker_list = list(postb_df["ticker"])
  postb_df = postb_df.set_index("ticker") 
  tickermr_dict = dict()
  tickersize_dict = dict()
  tickerbm_dict = dict()
  for i in ticker_list:
    tickermr_dict[i] = []
    tickersize_dict[i] = []
    tickerbm_dict[i] = []

  # 12 monthly returns for each stock 
  for mon in range(12):
    start += relativedelta(months=1)
    for i in ticker_list:
      tempdf = data_rstk[data_rstk["ticker"]==i]
      for j in tempdf["date"]:
        if dt.timedelta(days=3) >= j.to_pydatetime().date()- start >= dt.timedelta(days=-7):
          tickermr_dict[i].append(list(tempdf[tempdf.date==j]["monthly_return"])[0])
  
  # find size (6/30，但未必)
  for i in ticker_list:
    tempdf = size_me[size_me["ticker"]==i]
    for j in tempdf["date"]:
      if dt.timedelta(days=3) >= j.to_pydatetime().date()- start2 >= dt.timedelta(days=-7):
        tickersize_dict[i].append(list(tempdf[tempdf.date==j]["mv"])[0])
  start2 += relativedelta(years=1)

  # find bm ratio (12/31，但未必)
  for i in ticker_list:
    tempdf = size_me[size_me["ticker"]==i]
    for j in tempdf["date"]:
      if dt.timedelta(days=3) >= j.to_pydatetime().date()- start3 >= dt.timedelta(days=-7):
        tickerbm_dict[i].append(list(tempdf[tempdf.date==j]["bm"])[0])
  start3 += relativedelta(years=1)
  
  tickermr_df = pd.DataFrame.from_dict(tickermr_dict, orient="index")
  merged_data = tickermr_df.merge(postb_df, left_index=True, right_index=True)
  tickersize_df = pd.DataFrame.from_dict(tickersize_dict, orient="index")
  merged_data = merged_data.merge(tickersize_df, left_index=True, right_index=True)
  tickerbm_df = pd.DataFrame.from_dict(tickerbm_dict, orient="index")
  merged_data = merged_data.merge(tickerbm_df, left_index=True, right_index=True)
  print(merged_data)
  merged_data.to_excel(path)

# reg only beta
num_company = []
reg_beta_coef = []
for i in range(15):
  path = "/content/postbeta資料-"+str(i+1)+".xlsx"
  final_df = pd.read_excel(path)
  #final_df = final_df # 處理遺漏值
  final_df = final_df.rename(columns={"":"ticker", "0_x":0,"post beta":"post_beta", "0_y":"size", 0: "bm"})
  #num_company.append(len(final_df.index))
  for i in range(12):
    Y = final_df[i].tolist()
    for j in range(len(Y)):
      Y[j] = Y[j]/100
    X = final_df["post_beta"].tolist()
    list_tuples = list(zip(Y, X))  
    df_reg = pd.DataFrame(list_tuples, columns=["Y", "X"]).dropna() 
    num_company.append(len(df_reg))
    result = sm.ols(formula="Y ~  X", data=df_reg).fit()
    reg_beta_coef.append(result.params["X"])
print(num_company)
print(reg_beta_coef)

def t(reg_result, n):
  se = np.std(reg_result, ddof=1)
  mu = np.mean(reg_result)
  t = mu/(se/np.sqrt(n))
  return t

# regression only beta
avg_company = np.mean(num_company)
t_betaonly = t(reg_beta_coef, len(reg_beta_coef))
print("t:", t_betaonly)
print("mean_beta:", np.mean(reg_beta_coef)*100) # 已經*100，單位%
print("average companies", avg_company)

# reg beta + ln(size)
num_company2 = []
reg_beta_coef2 = []
reg_lnsize_coef2 = []
for i in range(15):
  path = "/content/postbeta資料-"+str(i+1)+".xlsx"
  final_df = pd.read_excel(path)
  #final_df = final_df # 處理遺漏值
  final_df = final_df.rename(columns={"":"ticker", "0_x":0,"post beta":"post_beta", "0_y":"size", 0: "bm"})
  #num_company.append(len(final_df.index))
  for i in range(12):
    Y = final_df[i].tolist()
    for j in range(len(Y)):
      Y[j] = Y[j]/100
    X = final_df["post_beta"].tolist()
    Z = final_df["size"].tolist()
    for j in range(len(Z)):
      Z[j] = np.log(Z[j])
    list_tuples = list(zip(Y, X, Z))  
    df_reg = pd.DataFrame(list_tuples, columns=["Y", "X", "Z"]).dropna() 
    num_company2.append(len(df_reg))
    result = sm.ols(formula="Y ~  X + Z", data=df_reg).fit()
    reg_beta_coef2.append(result.params["X"])
    reg_lnsize_coef2.append(result.params["Z"])
print(num_company2)
print(reg_beta_coef2)
print(reg_lnsize_coef2)

# regression on beta + ln(size)
avg_company2 = np.mean(num_company2)
t_beta2 = t(reg_beta_coef2, len(reg_beta_coef2))
t_lnsize2 = t(reg_lnsize_coef2, len(reg_lnsize_coef2))
print("t:", t_beta2)
print("mean_beta:", np.mean(reg_beta_coef2)*100)  # 已經*100，單位%
print("t:", t_lnsize2)
print("mean_lnsize:", np.mean(reg_lnsize_coef2)*100)  # 已經*100，單位%
print("average companies", avg_company2)

# ln(size) only
num_company3 = []
reg_lnsize_coef3 = []
for i in range(15):
  path = "/content/postbeta資料-"+str(i+1)+".xlsx"
  final_df = pd.read_excel(path)
  #final_df = final_df # 處理遺漏值
  final_df = final_df.rename(columns={"":"ticker", "0_x":0,"post beta":"post_beta", "0_y":"size", 0: "bm"})
  #num_company.append(len(final_df.index))
  for i in range(12):
    Y = final_df[i].tolist()
    for j in range(len(Y)):
      Y[j] = Y[j]/100
    Z = final_df["size"].tolist()
    for j in range(len(Z)):
      Z[j] = np.log(Z[j])
    list_tuples = list(zip(Y, Z))  
    df_reg = pd.DataFrame(list_tuples, columns=["Y", "Z"]).dropna() 
    num_company3.append(len(df_reg))
    result = sm.ols(formula="Y ~  Z", data=df_reg).fit()
    reg_lnsize_coef3.append(result.params["Z"])
print(num_company3)
print(reg_lnsize_coef3)

# regression on ln(size) only
avg_company3 = np.mean(num_company3)
t_lnsize3 = t(reg_lnsize_coef3, len(reg_lnsize_coef3))
print("t:", t_lnsize3)
print("mean:", np.mean(reg_lnsize_coef3)*100) # 已經*100，單位%
print("average companies", avg_company3)

# lnbm only
num_company4 = []
reg_lnbm_coef4 = []
for i in range(15):
  path = "/content/postbeta資料-"+str(i+1)+".xlsx"
  final_df = pd.read_excel(path)
  #final_df = final_df # 處理遺漏值
  final_df = final_df.rename(columns={"":"ticker", "0_x":0,"post beta":"post_beta", "0_y":"size", 0: "bm"})
  #num_company.append(len(final_df.index))
  for i in range(12):
    Y = final_df[i].tolist()
    for j in range(len(Y)):
      Y[j] = Y[j]/100
    W = final_df["bm"].tolist()
    for j in range(len(W)):
      W[j] = np.log(W[j])
    list_tuples = list(zip(Y, W))  
    df_reg = pd.DataFrame(list_tuples, columns=["Y", "W"]).dropna() 
    num_company4.append(len(df_reg))
    result = sm.ols(formula="Y ~  W", data=df_reg).fit()
    reg_lnbm_coef4.append(result.params["W"])
print(num_company4)
print(reg_lnbm_coef4)

# regression on ln(bm) only
avg_company4 = np.mean(num_company4)
t_lnbm4 = t(reg_lnbm_coef4, len(reg_lnbm_coef4))
print("t:", t_lnbm4)
print("mean:", np.mean(reg_lnbm_coef4)*100) # 已經*100，單位%
print("average companies", avg_company4)

# reg beta + ln(size) + ln(bm)
num_company5 = []
reg_beta_coef5 = []
reg_lnsize_coef5 = []
reg_lnbm_coef5 = []
for i in range(15):
  path = "/content/postbeta資料-"+str(i+1)+".xlsx"
  final_df = pd.read_excel(path)
  #final_df = final_df # 處理遺漏值
  final_df = final_df.rename(columns={"":"ticker", "0_x":0,"post beta":"post_beta", "0_y":"size", 0: "bm"})
  #num_company.append(len(final_df.index))
  for i in range(12):
    Y = final_df[i].tolist()
    for j in range(len(Y)):
      Y[j] = Y[j]/100
    X = final_df["post_beta"].tolist()
    Z = final_df["size"].tolist()
    for j in range(len(Z)):
      Z[j] = np.log(Z[j])
    W = final_df["bm"].tolist()
    for j in range(len(W)):
      W[j] = np.log(W[j])
    list_tuples = list(zip(Y, X, Z, W))  
    df_reg = pd.DataFrame(list_tuples, columns=["Y", "X", "Z", "W"]).dropna() 
    num_company5.append(len(df_reg))
    result = sm.ols(formula="Y ~  X + Z + W", data=df_reg).fit()
    reg_beta_coef5.append(result.params["X"])
    reg_lnsize_coef5.append(result.params["Z"])
    reg_lnbm_coef5.append(result.params["W"])
print(num_company5)
print(reg_beta_coef5)
print(reg_lnsize_coef5)
print(reg_lnbm_coef5)

# regression on beta + ln(size) + ln(bm)
avg_company5 = np.mean(num_company5)
t_beta5 = t(reg_beta_coef5, len(reg_beta_coef5))
t_lnsize5 = t(reg_lnsize_coef5, len(reg_lnsize_coef5))
t_lnbm5 = t(reg_lnbm_coef5, len(reg_lnbm_coef5))
print("t:", t_beta5)
print("mean_beta:", np.mean(reg_beta_coef5)*100)  # 已經*100，單位%
print("t:", t_lnsize5)
print("mean_lnsize:", np.mean(reg_lnsize_coef5)*100)  # 已經*100，單位%
print("t:", t_lnbm5)
print("mean_lnbm:", np.mean(reg_lnbm_coef5)*100) # 已經*100，單位%
print("average companies", avg_company5)

# reg ln(size) + ln(bm)
num_company6 = []
reg_lnsize_coef6 = []
reg_lnbm_coef6 = []
for i in range(15):
  path = "/content/postbeta資料-"+str(i+1)+".xlsx"
  final_df = pd.read_excel(path)
  #final_df = final_df # 處理遺漏值
  final_df = final_df.rename(columns={"":"ticker", "0_x":0,"post beta":"post_beta", "0_y":"size", 0: "bm"})
  #num_company.append(len(final_df.index))
  for i in range(12):
    Y = final_df[i].tolist()
    for j in range(len(Y)):
      Y[j] = Y[j]/100
    Z = final_df["size"].tolist()
    for j in range(len(Z)):
      Z[j] = np.log(Z[j])
    W = final_df["bm"].tolist()
    for j in range(len(W)):
      W[j] = np.log(W[j])
    list_tuples = list(zip(Y, Z, W))  
    df_reg = pd.DataFrame(list_tuples, columns=["Y", "Z", "W"]).dropna() 
    num_company6.append(len(df_reg))
    result = sm.ols(formula="Y ~ Z + W", data=df_reg).fit()
    reg_lnsize_coef6.append(result.params["Z"])
    reg_lnbm_coef6.append(result.params["W"])
print(num_company6)
print(reg_lnsize_coef6)
print(reg_lnbm_coef6)

# regression on ln(size) + ln(bm)
avg_company6 = np.mean(num_company6)
t_lnsize6 = t(reg_lnsize_coef6, len(reg_lnsize_coef6))
t_lnbm6 = t(reg_lnbm_coef6, len(reg_lnbm_coef6))
print("t:", t_lnsize6)
print("mean_lnsize:", np.mean(reg_lnsize_coef6)*100)  # 已經*100，單位%
print("t:", t_lnbm6)
print("mean_lnbm:", np.mean(reg_lnbm_coef6)*100) # 已經*100，單位%
print("average companies", avg_company6)